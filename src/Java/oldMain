        int [] randomArray = {2,2,2,2,3,3,4,4};
        NumberOfOccurances numberOfOccurances = new NumberOfOccurances();

        System.out.println(numberOfOccurances.getNumberOfOccurances(randomArray, 2));

        ReverseWords.reverseWords("hello world");

        int [] heights = {0,7,1,4,6};

        TrappingRainWater trappingRainWater = new TrappingRainWater();
        int rainWater = trappingRainWater.tapRainWater(heights);

        System.out.println("Rain Water: " + rainWater);


        MinStack minStack = new MinStack();
        minStack.push(-2);
        minStack.push(-0);
        minStack.push(-3);
        minStack.getMin();
        minStack.pop();
        minStack.top();
        minStack.getMin();

        int [] difficulty = {68,35,52,47,86};
        int [] profit = {67,17,1,81,3};
        int [] worker = {92,10,85,84,82};

        MostProfitAssigningWork mostProfitAssigningWork = new MostProfitAssigningWork();
        mostProfitAssigningWork.maxProfitAssignment(difficulty, profit, worker);

                TreeNode node_1 = new TreeNode(1);
                TreeNode node_2 = new TreeNode(2);
                TreeNode node_3 = new TreeNode(8);
                TreeNode node_4 = new TreeNode(11);
                TreeNode node_5 = new TreeNode(13);
                TreeNode node_6 = new TreeNode(4);
                TreeNode node_7 = new TreeNode(7);
                TreeNode node_8 = new TreeNode(2);
                TreeNode node_9 = new TreeNode(1);

                node_1.left = node_2;

                node_9.left = null;
                node_9.right = null;

                node_8.left = null;
                node_8.right = null;

                node_7.left = null;
                node_7.right = null;

                node_6.left = null;
                node_6.right = node_9;

                node_5.left = null;
                node_5.right = null;

                node_4.left = node_7;
                node_4.right = node_8;

                node_2.left = node_4;
                node_2.right = null;

                node_3.left = node_5;
                node_3.right = node_6;

                node_1.left = node_2;
                node_1.right = node_3;

                PathSum pathSum = new PathSum();

                if (pathSum.hasPathSum(node_1, 1))
                    System.out.println("sum found");
                else
                    System.out.println("sum not found");

            }